// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gofiber/fiber/v2"
	"openaigo/config"
	"openaigo/src/router"
)

// Injectors from wire.go:

func InitializeApplication(cfg config.IConfig) (*Application, error) {
	app := provideFiber()
	iDatabase, err := provideDatabase()
	if err != nil {
		return nil, err
	}
	iCore := provideRepository()
	iai := provideOpenAI(cfg)
	serviceICore := provideService(iDatabase, iCore, iai)
	iLogger := provideLogger(cfg)
	iValidate := provideValidator(iLogger)
	handlerICore := provideHandler(cfg, serviceICore, iValidate, iLogger)
	iRouter := provideRouter(handlerICore)
	application := newApplication(app, iRouter)
	return application, nil
}

// wire.go:

type Application struct {
	Fiber  *fiber.App
	Router router.IRouter
}

func newApplication(
	fiberApp *fiber.App,
	r router.IRouter,
) *Application {
	return &Application{
		Fiber:  fiberApp,
		Router: r,
	}
}
